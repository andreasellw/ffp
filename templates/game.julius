const digits = [
  "/static/assets/d0.svg",
  "/static/assets/d1.svg",
  "/static/assets/d2.svg",
  "/static/assets/d3.svg",
  "/static/assets/d4.svg",
  "/static/assets/d5.svg",
  "/static/assets/d6.svg",
  "/static/assets/d7.svg",
  "/static/assets/d8.svg",
  "/static/assets/d9.svg",
];

var gameStatus = "";
var src;

// Toggle flag, or reveal cell
const makeMove = (x, y, gameId, event) => {
  event.preventDefault();

  console.log("MAKE MOVE", { x, y, gameId }, "EVENT", {
    button: event.button,
    altKey: event.altKey,
    shiftKey: event.shiftKey,
    event,
  });

  var action = null;
  if (event.button === 0 && !event.altKey && !event.shiftKey) {
    action = "Reveal";
  } else if (event.button === 0 && event.altKey && !event.shiftKey) {
    action = "Flag";
  } else if (event.button === 0 && !event.altKey && event.shiftKey) {
    action = "QuickReveal";
  }

  $.ajax({
    url: "/game/" + gameId,
    type: "PUT",
    contentType: "application/json",
    data: JSON.stringify({
      action: event.altKey ? "Flag" : "Reveal",
      coordX: x,
      coordY: y,
    }),
    success: function (data) {
      console.info("[SUCCESS] MAKE MOVE", { data });
    },
    error: function (data) {
      console.error("[ERROR] MAKE MOVE", { data });
    },
  });
};

// Reveal all
const revealAll = (gameId) => {
  console.log("REVEAL ALL", { gameId });

  $.ajax({
    url: "/game/" + gameId,
    type: "PUT",
    contentType: "application/json",
    data: JSON.stringify({
      action: "RevealAllNonFlagged",
    }),
    success: function (data) {
      console.info("[SUCCESS] REVEAL ALL", { data });
    },
    error: function (data) {
      console.error("[ERROR] REVEAL ALL", { data });
    },
  });
};
// Reset game
const resetGame = (gameId) => {
  console.log("RESET GAME", { gameId });

  const status = gameStatus;
  $.ajax({
    url: "/game/" + gameId + "/reset",
    type: "POST",
    contentType: "application/json",
    data: JSON.stringify({}),
    success: function (data) {
      console.info("[SUCCESS] RESET GAME", { data });
      console.log(gameStatus);
      if (gameId === data.gameId) {
        console.log("Same gameID ", { status });
      } else {
        console.log("New gameID - Rerouting to new game...", { status });
        const newUrl = "/game/" + data.gameId;
        console.log("Rerouting...", { newUrl });
        if (src) {
          console.log("Closing EventSource");
          src.close();
        }
        window.location.assign(newUrl);
      }
    },
    error: function (data) {
      console.error("[ERROR] RESET GAME", { data });
    },
  });
};

// Pause game
const pauseGame = (gameId) => {
  console.log("PAUSE GAME", { gameId });

  $.ajax({
    url: "/game/" + gameId + "/pause",
    type: "POST",
    contentType: "application/json",
    data: JSON.stringify({}),
    success: function (data) {
      console.info("[SUCCESS] PAUSE GAME", { data });
      const newUrl = "@{GamesR}";
      console.log("Rerouting...", { newUrl });
      if (src) {
        console.log("Closing EventSource");
        src.close();
      }
      window.location.assign(newUrl);
    },
    error: function (data) {
      console.error("[ERROR] PAUSE GAME", { data });
    },
  });
};

// Update timer (seconds, flags)
const setTimer = () => {
  let el = document.getElementById("seconds");
  let prevTime = parseInt(el.getAttribute("prevTime"), 10);
  let isBeforeFirstMove = el.getAttribute("isBeforeFirstMove");
  let elFace = document.getElementById("face");
  let status = elFace.getAttribute("status");

  // Game is running and not before first move, run timer
  if (status === "Ongoing" && isBeforeFirstMove == "False") {
    newTime = prevTime + 1;
    renderDigits(newTime, "seconds");
    el.setAttribute("prevTime", newTime);
    // Render previous time and stop timer
  } else {
    renderDigits(prevTime, "seconds");
    myStopFunction();
  }
  return;
};

// Update face status
const setFace = () => {
  let el = document.getElementById("face");
  let status = el.getAttribute("status");
  let faceImg = document.getElementById("faceImg");

  if (status === "Lost") {
    faceImg.setAttribute("src", `/static/assets/face_lose.svg`);
  } else if (status === "Won") {
    faceImg.setAttribute("src", `/static/assets/face_win.svg`);
  } else {
    faceImg.setAttribute("src", `/static/assets/face_unpressed.svg`);
  }
  return;
};

const setFlags = () => {
  let el = document.getElementById("flags");
  let remainingFlags = parseInt(el.getAttribute("remainingFlags"), 10);

  renderDigits(remainingFlags, "flags");
};

// Split digits and render each digit seperately
const renderDigits = (number, id) => {
  let numberStr;
  numberStr = number < 999 ? String(number) : "999";
  if (number < 10) numberStr = "00" + numberStr;
  else if (number < 100) numberStr = "0" + numberStr;

  let img0s = document.getElementById(id + "0s");
  let img10s = document.getElementById(id + "10s");
  let img100s = document.getElementById(id + "100s");

  if (img0s.getAttribute("src") !== `/static/assets/d${numberStr[2]}.svg`) {
    img0s.setAttribute("src", `/static/assets/d${numberStr[2]}.svg`);
    img0s.setAttribute("alt", `${numberStr[2]}`);
  }
  if (img10s.getAttribute("src") !== `/static/assets/d${numberStr[1]}.svg`) {
    img10s.setAttribute("src", `/static/assets/d${numberStr[1]}.svg`);
    img0s.setAttribute("alt", `${numberStr[1]}`);
  }
  if (img100s.getAttribute("src") !== `/static/assets/d${numberStr[0]}.svg`) {
    img100s.setAttribute("src", `/static/assets/d${numberStr[0]}.svg`);
    img0s.setAttribute("alt", `${numberStr[0]}`);
  }
  return;
};

$(document).ready(function () {
  let elFace = document.getElementById("face");
  gameStatus = elFace.getAttribute("status");
  setFlags();
  setFace();
  toggleControls(gameStatus);

  src = new EventSource("@{ChannelR gameIdText}");
  src.onerror = function (input) {
    console.log({ input });
    console.error("ONERROR!");
    //goBack();
  };
  src.onmessage = function (input) {
    // console.log({ input });
    var message = JSON.parse(input.data);
    if (message.status === "Paused") {
      console.info("PAUSED GAME", message.status);
      const newUrl = "@{GamesR}";
      console.log("Rerouting...", { newUrl });
      if (src) {
        console.log("Closing EventSource");
        src.close();
      }
      window.location.assign(newUrl);
    }
    console.log({ message });
    gameStatus = message.status; // to ensure status in reset method
    // Set timer
    let elSeconds = document.getElementById("seconds");
    // Game is running, run timer
    if (message.moves.length > 0) {
      elSeconds.setAttribute("isBeforeFirstMove", "False");
      myStopFunction();
      timer = setInterval(setTimer, 1000);
      // Game is in init state, set prevTime to 0
    } else {
      let seedEl = document.getElementById("seed");
      seedEl.innerHTML = message.seed;
      elSeconds.setAttribute("isBeforeFirstMove", "True");
      elSeconds.setAttribute("prevTime", 0);
      renderDigits(0, "seconds");
      newTime = 0;
    }
    if (message.status == "Won" || message.status == "Lost") {
      elSeconds.setAttribute("prevTime", message.timeElapsed);
    }
    // Set flags
    let elFlags = document.getElementById("flags");
    elFlags.setAttribute("remainingFlags", message.flagsRemaining);
    // Set face
    let elFace = document.getElementById("face");
    elFace.setAttribute("status", message.status);
    console.log(elFace.getAttribute("status"));
    setFlags();
    setFace();
    toggleControls(gameStatus);
    updateBoard(message.board, message.gameId, message.status);
  };
});

const updateBoard = (newBoard, gameId, status) => {
  var row;
  for (row = 0; row < newBoard.length; row++) {
    var column;
    for (column = 0; column < newBoard[row].cells.length; column++) {
      let oldCellTdEl = document.getElementById(`x${row + 1}y${column + 1}`);
      let cellDivTag = oldCellTdEl.querySelector(".div");
      let cellImgTag = cellDivTag
        ? cellDivTag.querySelector(".img")
        : oldCellTdEl.querySelector(".img");
      let newCell = newBoard[row].cells[column];
      if (
        cellImgTag.getAttribute("src") !==
        `/static/assets/${newCell.assetId}.svg`
      ) {
        cellImgTag.setAttribute("src", `/static/assets/${newCell.assetId}.svg`);
      }
      if (status == "Ongoing") {
        cellDivTag.setAttribute(
          "onclick",
          `makeMove(${row + 1},${column + 1},'${gameId}',event)`
        );
      } else {
        if (cellDivTag.getAttribute("onclick")) {
          cellDivTag.removeAttribute("onclick");
        }
      }
    }
  }
};

const goBack = () => {
  console.info("GO BACK");
  const newUrl = "@{GamesR}";
  console.log("Rerouting...", { newUrl });
  if (src) {
    console.log("Closing EventSource");
    src.close();
  }
  window.location.assign(newUrl);
};

const toggleControls = (status) => {
  console.log("TOGGLE CONTROLS");
  let goBackBtn = document.getElementById("goBackBtn");
  let revealAllBtn = document.getElementById("revealAllBtn");
  const gameId = goBackBtn.getAttribute("gameId");
  if (status !== "Ongoing") {
    goBackBtn.textContent = "← Back";
    goBackBtn.onclick = function () {
      goBack();
    };
    if (revealAllBtn) {
      revealAllBtn.className = "hidden";
    }
  } else {
    goBackBtn.textContent = "Pause Game";
    goBackBtn.onclick = function () {
      pauseGame(gameId);
    };
    if (revealAllBtn) {
      revealAllBtn.classList.remove("hidden");
    }
  }
};

var timer = setInterval(setTimer, 1000);
let newTime = 0;

const myStopFunction = () => {
  clearInterval(timer);
};
