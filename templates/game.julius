const digits = [
  "/static/assets/d0.svg",
  "/static/assets/d1.svg",
  "/static/assets/d2.svg",
  "/static/assets/d3.svg",
  "/static/assets/d4.svg",
  "/static/assets/d5.svg",
  "/static/assets/d6.svg",
  "/static/assets/d7.svg",
  "/static/assets/d8.svg",
  "/static/assets/d9.svg",
];

var gameStatus = "";

// Toggle flag, or reveal cell
const makeMove = (x, y, gameId, event) => {
  event.preventDefault();

  console.log("MAKE MOVE", { x, y, gameId, event });

  $.ajax({
    url: "/game/" + gameId,
    type: "PUT",
    contentType: "application/json",
    data: JSON.stringify({
      action: event.altKey ? "Flag" : "Reveal",
      coordX: x,
      coordY: y,
    }),
    success: function (data) {
      console.info("[SUCCESS] MAKE MOVE", { data });
    },
    error: function (data) {
      console.error("[ERROR] MAKE MOVE", { data });
    },
  });
};

// Reveal all
const revealAll = (gameId) => {
  console.log("REVEAL ALL", { gameId });

  $.ajax({
    url: "/game/" + gameId,
    type: "PUT",
    contentType: "application/json",
    data: JSON.stringify({
      action: "RevealAllNonFlagged",
    }),
    success: function (data) {
      console.info("[SUCCESS] REVEAL ALL", { data });
    },
    error: function (data) {
      console.error("[ERROR] REVEAL ALL", { data });
    },
  });
};
// Reset game
const resetGame = (gameId) => {
  console.log("RESET GAME", { gameId });

  const status = gameStatus;
  $.ajax({
    url: "/game/" + gameId + "/reset",
    type: "POST",
    contentType: "application/json",
    data: JSON.stringify({}),
    success: function (data) {
      console.info("[SUCCESS] RESET GAME", { data });
      console.log(gameStatus);
      if (gameStatus === "Won" || gameStatus === "Lost") {
        console.log("Reloading window...", { status });
        window.location.reload();
      }
    },
    error: function (data) {
      console.error("[ERROR] RESET GAME", { data });
    },
  });
};

// Pause game
const pauseGame = (gameId) => {
  console.log("PAUSE GAME", { gameId });

  $.ajax({
    url: "/game/" + gameId + "/pause",
    type: "POST",
    contentType: "application/json",
    data: JSON.stringify({}),
    success: function (data) {
      console.info("[SUCCESS] PAUSE GAME", { data });
      const newUrl = "@{GamesR}";
      console.log("Rerouting...", { newUrl });
      window.location.assign(newUrl);
    },
    error: function (data) {
      console.error("[ERROR] PAUSE GAME", { data });
    },
  });
};

// Update timer (seconds, flags)
const setTimer = () => {
  let el = document.getElementById("seconds");
  let prevTime = parseInt(el.getAttribute("prevTime"), 10);
  //console.log({ el, prevTime });
  let elFace = document.getElementById("face");
  let status = elFace.getAttribute("status");

  let newTime = prevTime + 1;

  if (status === "Ongoing") {
    renderDigits(newTime, "seconds");
    el.setAttribute("prevTime", newTime);
  } else if (!el.getAttribute("init").match("True")) {
    renderDigits(prevTime, "seconds");
    el.setAttribute("init", "True");
    myStopFunction();
  }
  return;
};

// Update face status
const setFace = () => {
  let el = document.getElementById("face");
  let status = el.getAttribute("status");

  let asset;
  if (status === "Lost") {
    asset = "/static/assets/face_lose.svg";
  } else if (status === "Won") {
    asset = "/static/assets/face_active.svg";
  } else {
    asset = "/static/assets/face_unpressed.svg";
  }
  el.innerHTML = `<img src="${asset}" alt="face" class="h-12" />`;
  return;
};

const setFlags = () => {
  let el = document.getElementById("flags");
  let remainingFlags = parseInt(el.getAttribute("remainingFlags"), 10);

  renderDigits(remainingFlags, "flags");
};

// Split digits and render each digit seperately
// TODO use attributes instead
const renderDigits = (number, id) => {
  let el = document.getElementById(id);
  let numberStr;
  numberStr = number < 999 ? String(number) : "999";
  if (number < 10) numberStr = "00" + numberStr;
  else if (number < 100) numberStr = "0" + numberStr;
  let resSeconds = numberStr
    .split("")
    .map((n, i) => `<img key=${i} src=${digits[n]} alt=${n} class="h-12" />`);
  let inner = `<div class="flex flex-row">${resSeconds.join("")}</div>`;
  el.innerHTML = inner;
  return;
};

// TODO #controls (toggle)

$(document).ready(function () {
  let elFace = document.getElementById("face");
  gameStatus = elFace.getAttribute("status");
  setFlags();
  setFace();
  var src = new EventSource("@{ChannelR gameIdText}");
  src.onmessage = function (input) {
    // console.log({ input });
    var message = JSON.parse(input.data);
    var obj = JSON.parse(message);
    if (obj.status === "Paused") {
      console.info("PAUSED GAME", obj.status);
      const newUrl = "@{GamesR}";
      console.log("Rerouting...", { newUrl });
      window.location.assign(newUrl);
    }
    console.log({ obj });
    gameStatus = obj.status; // to ensure status in reset method
    let elFlags = document.getElementById("flags");
    elFlags.setAttribute("remainingFlags", obj.flagsRemaining);
    let elFace = document.getElementById("face");
    elFace.setAttribute("status", obj.status);
    console.log(elFace.getAttribute("status"));
    setFace();
    updateBoard(obj.board, obj.gameId, obj.status);
  };
});

const updateBoard = (newBoard, gameId, status) => {
  var row;
  for (row = 0; row < newBoard.length; row++) {
    var column;
    for (column = 0; column < newBoard[row].cells.length; column++) {
      let oldCellTdEl = document.getElementById(`x${row + 1}y${column + 1}`);
      let cellDivTag = oldCellTdEl.querySelector(".div");
      let cellImgTag = cellDivTag
        ? cellDivTag.querySelector(".img")
        : oldCellTdEl.querySelector(".img");
      let newCell = newBoard[row].cells[column];
      if (cellImgTag.getAttribute("src") !== newCell.image) {
        cellImgTag.setAttribute("src", `/static/assets/${newCell.assetId}.svg`);
      }
      if (status == "Ongoing") {
        cellDivTag.setAttribute(
          "onclick",
          `makeMove(${row + 1},${column + 1},'${gameId}',event)`
        );
      } else {
        if (cellDivTag.getAttribute("onclick")) {
          cellDivTag.removeAttribute("onclick");
        }
      }
    }
  }
};

var timer = setInterval(setTimer, 1000);

const myStopFunction = () => {
  clearInterval(timer);
};
